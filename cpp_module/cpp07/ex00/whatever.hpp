/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   whatever.hpp                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: eshakita <eshakita@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/10/18 11:11:45 by eshakita          #+#    #+#             */
/*   Updated: 2021/10/18 15:14:31 by eshakita         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef WHATEVER_HPP
#define WHATEVER_HPP

#include <iostream>

/*
Сначала пишем ключевое слово template, которое сообщает компилятору, 
что дальше мы будем объявлять параметры шаблона.

Параметры шаблона функции указываются в угловых скобках (<>).

Для создания типов параметров шаблона используются ключевые слова 
typename и class. В базовых случаях использования шаблонов функций разницы
между typename и class нет, поэтому вы можете выбрать любое из двух. 
Если вы используете ключевое слово class, то фактический тип параметров не 
обязательно должен быть классом 
(это может быть переменная фундаментального типа данных, указатель или что-то другое).

Затем называем тип параметра шаблона (обычно T).

Если требуется несколько типов параметров шаблона, то они разделяются запятыми:
template <typename T1, typename T2>

Поскольку тип аргумента функции, передаваемый в тип T, может быть классом,
а классы, как правило, не рекомендуется передавать по значению,
то лучше сделать параметры и возвращаемое значение нашего шаблона 
функции константными ссылками, например:
*/

template <typename T> // объявление параметров шаблона
T& max(T& a, T& b) // если работаем и с классами то - const T& max(const T& a, const T& b)
{
    if(a > b)
        return(a);
    return(b);
}

template <typename T>
T& min(T& a, T& b)
{
    if(a < b)
        return(a);
    return(b);
}

template <typename T>
void swap(T& a, T& b)
{
    T tmp;
    tmp = a;
    a = b;
    b = tmp;
}

#endif